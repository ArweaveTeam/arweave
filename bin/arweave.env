#!/bin/bash

echo "Arweave launch script: $0"

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PARENT_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"

$SCRIPT_DIR/check-nofile

if [ -f "${SCRIPT_DIR}/arweave" ]; then
    # If arweave exists in the current directory we are likely running from a binary release
    export ARWEAVE="${SCRIPT_DIR}/arweave"
    export ARWEAVE_COMMAND="foreground"
else
    # If arweave does not exist in the current directory we are likely running from source so
    # build a release and then copy the arweave binary to the current directory and link
    # the releases and lib directories in the parent directory. This allows the arweave
    # extended start script to run from our current directory (which is necessary for relative
    # paths to work correctly and not be relative to the rebar3 _build release directory)
    echo Removing build artifacts...
    set -x
    rm -f "${SCRIPT_DIR}/arweave-dev"
    rm -f "${PARENT_DIR}/lib"
    rm -f "${PARENT_DIR}/releases"
    { set +x; } 2>/dev/null
    echo
    echo Building dependencies...
    (cd ${PARENT_DIR} && ./rebar3 as ${ARWEAVE_BUILD_TARGET:-default} release)
    RELEASE_PATH=$(cd ${PARENT_DIR} && ./rebar3 as ${ARWEAVE_BUILD_TARGET:-default} path --rel)
    echo
    echo Copying and linking build artifacts
    set -x
    cp ${RELEASE_PATH}/arweave/bin/arweave ${SCRIPT_DIR}/arweave-dev
    ln -s ${RELEASE_PATH}/arweave/releases ${PARENT_DIR}/releases
    ln -s ${RELEASE_PATH}/arweave/lib ${PARENT_DIR}/lib
    { set +x; } 2>/dev/null
    echo
    export ARWEAVE="${SCRIPT_DIR}/arweave-dev"
    export ARWEAVE_COMMAND="console"
fi

if [ $# -gt 0 ] && [ `uname -s` == "Darwin" ]; then
    export RANDOMX_JIT="disable randomx_jit"
else
    export RANDOMX_JIT=
fi

export ERL_EPMD_ADDRESS=127.0.0.1
export NODE_NAME='arweave@127.0.0.1'

# +MBas aobf: emulator Memory Binary Allocation Strategy set to Address Order Best Fit
#                   https://www.erlang.org/doc/man/erts_alloc.html#strategy
# +MBlmbcs 512: emulator Memory Binary Largest (mseg_alloc) MultiBlock Carrier Size in kilobytes
#                   https://www.erlang.org/doc/man/erts_alloc.html#mseg_mbc_sizes
# +A100: emulator number of threads in the Async long thread pool for linked in drivers; mostly unused
# +SDio100: emulator Scheduler thread count for Dirty I/O, 100 threads for file access
# +Bi: emulator Break handling: Ignore break signals
export ARWEAVE_OPTS="+MBas aobf +MBlmbcs 512 +Ktrue +A200 +SDio200 \
    +sbwtvery_long +sbwtdcpuvery_long +sbwtdiovery_long \
    +swtvery_low +swtdcpuvery_low +swtdiovery_low +Bi"

echo "Arweave launch script: $ARWEAVE"
echo "Arweave launch options: $ARWEAVE_OPTS"
#!/bin/bash

echo "Arweave launch script: $0"

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PARENT_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"

$SCRIPT_DIR/check-nofile

if [ -f "${SCRIPT_DIR}/arweave" ]; then
    # If arweave exists in the current directory we are likely running from a binary release
    export ARWEAVE="${SCRIPT_DIR}/arweave"
    export ARWEAVE_COMMAND="foreground"
else
    # If arweave does not exist in the current directory we are likely running from source so
    # build a release and then copy the arweave binary to the current directory and link
    # the releases and lib directories in the parent directory. This allows the arweave
    # extended start script to run from our current directory (which is necessary for relative
    # paths to work correctly and not be relative to the rebar3 _build release directory)
    echo Building dependencies...
    (cd ${PARENT_DIR} && ./ar-rebar3 ${ARWEAVE_BUILD_TARGET:-default} release)
    export ARWEAVE="${SCRIPT_DIR}/arweave-dev"
    export ARWEAVE_COMMAND="console"
fi

if [ $# -gt 0 ] && [ `uname -s` == "Darwin" ]; then
    export RANDOMX_JIT="disable randomx_jit"
else
    export RANDOMX_JIT=
fi

export ERL_EPMD_ADDRESS=127.0.0.1
if [ -z "${NODE_NAME}" ]; then
    export NODE_NAME='arweave@127.0.0.1'
fi

# +A200: emulator number of threads in the Async long thread pool for linked in drivers; 
#        mostly unused
# +SDio200: emulator Scheduler thread count for Dirty I/O, 200 threads for file access
# +Bi: emulator Break handling: Ignore break signals
# +MBmmsbc 1024: binary_alloc maximum mseg_alloc singleblock carriers (1024 carriers, default 256).
#                Once exhausted, the emulator will start using sys_alloc rather than mseg_alloc
#                for singleblock carriers. This can be slower.
# +MBsbct 103424: binary_alloc singleblock carrier threshold (in KiB) (101MiB, default 512KiB).
#                 Blocks larger than the threshold are placed in singleblock carriers. However
#                 multi-block carriers are more efficient. Since we have so many 100MiB binary
#                 blocks due to the recall range, set the threshold so that they are all placed in
#                 multi-block carriers and not single-block carriers.
# +MBsmbcs 10240: binary_alloc smallest multi-block carrier size (in KiB) (10MiB, default 256KiB).
# +MBlmbcs 410629: binary_alloc largest multi-block carrier size (in KiB) (~401MiB, default 5MiB).
#                  Set so that a single multi-block carrier can hold roughly 4 full recall ranges.
# +MBas aobf: emulator Memory Binary Allocation Strategy set to Address Order Best Fit
#                   https://www.erlang.org/doc/man/erts_alloc.html#strategy
#
# Some useful links on Erlang's memory management:
# https://www.erlang-factory.com/static/upload/media/139454517145429lukaslarsson.pdf
# https://www.youtube.com/watch?v=nuCYL0X-8f4
# Note for testing it's sometimes useful to limit the number of schedulers that will be used,
# to do that: +S 16:16
export ARWEAVE_OPTS="+Ktrue +A1024 +SDio1024 \
    +MBsbct 103424 +MBsmbcs 10240 +MBlmbcs 410629 +MBmmmbc 1024 +MBas aobf \
    +sbwtvery_long +sbwtdcpuvery_long +sbwtdiovery_long \
    +swtvery_low +swtdcpuvery_low +swtdiovery_low +Bi"

echo "Arweave launch script: $ARWEAVE"
echo "Arweave launch options: $ARWEAVE_OPTS"
